C----------------------------------------------------------
C LUNAR LANDER SIMULATION 
C BY STEVE GLENNER 2024
C REQUIRES TEK4010 STYLE GRAPHICS TERMINAL
C----------------------------------------------------------
        PROGRAM GPGM
        IMPLICIT NONE

C FORMAT STATEMENTS FOR SENDING TERMINAL COMMANDS, GRAPHICS POINTS
101	FORMAT(' ',A1)    ! SEND 1 BYTE-UNRELIABLE-FORTRAN OUTPUT ADDS CRLF ETC
102	FORMAT('+',A1,A1) ! SEND 2 BYTES NO LEADING LINEFEED
201	FORMAT('+',A8)    ! SEND 8 BYTE STRING NO LEADING LINEFEED
202	FORMAT(' ',A8)    ! SEND 8 BYTE STRING WITH LEADING LINEFEED

        INTEGER SIMITR, X1, Y1, I, MAXITR, SHPCNT, KYWTTM
	INTEGER*4 J
	DATA MAXITR/10000/	! MAXIMUM SIMULATION ITERATIONS

C SHARED DATA STRUCTURE FOR TERMINAL I/O LIBRARY
	INTEGER BUFSIZ, NBUF, ERR, COUNT
	BYTE INP
	BYTE OTHER
	BYTE BUF(1000)
	COMMON/IOBUFR/ NBUF, ERR, COUNT

C TERMINAL UPDATE SPEED AS DETERMINED BY I/O LIBRARY
	LOGICAL QUIKUP
	LOGICAL GOTCHR

C BUSY LOOP LENGTH TO SLOW DOWN EVERYTHING
	INTEGER*4 BSYCNT,NOPCNT

C SIM SPEED CONTROL
	REAL TIMMLT	! TIME MULTIPLIER FOR SLOW SYSTEMS
	INTEGER BSYLEN	! BUSY LOOP LENGTH FOR SLOW SYSTEMS
	LOGICAL DEMO	! FLAG TO INDICATE DEMO MODE IS RUNNING
	COMMON/SIMSPD/TIMMLT,BSYLEN,DEMO
	DATA TIMMLT/2.0/
	DATA BSYLEN/300/

C PHYSICS CONSTANTS
	REAL MAXVH	! MAXIMUM HORIZONTAL VELOCITY
	REAL MAXVV	! MAXIMUM VERTICAL VELOCITY
	REAL GRAV	! GRAVITATIONAL ACCELERATION
	REAL BURNRT	! FUEL BURN RATE PER THRUST UNIT PER TICK
	REAL ACCTHR	! ACCELERATION PER THRUST UNIT PER TICK
	REAL LOFUEL	! LOW FUEL WARNING THRESHOLD
	COMMON/PHCONS/MAXVH,MAXVV,GRAV,BURNRT,ACCTHR,LOFUEL
	DATA MAXVH/20.0/
	DATA MAXVV/20.0/
	DATA GRAV/0.07/
	DATA BURNRT/0.25/
	DATA ACCTHR/0.1/
	DATA LOFUEL/50.0/

C SIMULATION DATA AND CONSTANTS
	LOGICAL ABVMON	! ABOVE MOON FLAG
	LOGICAL QUIT	! FLAG TO EXIT SIMULATION RUN
	INTEGER SCORE	! CURRENT SCORE
	REAL ANGINC 	! ANGLE INCREMENT WHEN TURNING
	INTEGER LEFTX	! LEFT EDGE OF CURRENT LUNAR SURFACE WINDOW
	INTEGER SCALEX	! HORIZONTAL MULTIPLIER FOR LUNAR SURFACE
	LOGICAL RDRMON	! REDRAW MOON FROM SCROLLING
	LOGICAL FULWRN	! FLAG TO INDICATE LOW FUEL CONDITION
	LOGICAL CRASH	! FLAG TO INDICATE SHIP CRASHED
        COMMON/SIMDAT/ABVMON,QUIT,SCORE,ANGINC,LEFTX,SCALEX,RDRMON,FULWRN,CRASH

C SHIP PARAMS
	REAL SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL
	COMMON/SHPDAT/ SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL

C SURFACE HEIGHT INT ARRAY
	INTEGER SRFHT(1024)
	COMMON /SRFDAT/ SRFHT

C SHIP STATIC VERTICIES ARRAY 14 X,Y POINTS
	INTEGER SHPDEF(14,2)

C SHIP DYNAMIC VERTICES 14 X,Y POINTS (ROTATED BY SHPANG)
	INTEGER SHPVRT(14,2)

C 2D POINT ARRAY OF LANDER 2D MODEL
C DATA IS 14 X VALUES, 14 Y VALUES
      DATA SHPDEF/-20,-10,-15,-15,-10,10,15,15,10,10,-10,-10,10,20,
     *-20,0,7,14,21,21,14,7,0,-10,-10,0,0,-20/
	COMMON/SHPPTS/ SHPDEF, SHPVRT

C MAIN PROGRAM INIITAL VALUES
	BUFSIZ = 1000
	COUNT = 0
	RDRMON = .FALSE.
	DEMO = .TRUE.
	KYWTTM = 1
100	CONTINUE
	SCORE = 0
	SHPCNT = 3
	FUEL = 200

C STARTING SIM  DATA (ALSO ON GAME CONTINUES)
C START PARALLEL TO THE SURFACE
110	CONTINUE
	ABVMON = .TRUE.
	CRASH = .FALSE.
	QUIT = .FALSE.
	SHPANG = 3.1415926 ! PI = SHIP POITING LEFT
	ANGINC = 3.1415926 / 16
	LEFTX = 1
	SCALEX = 6
	SHPX = 160
	SHPY = 650
	VELX = 5
	VELY = 0
	THRUST = 0.0
	INP = 0
	COUNT = 0
	ERR = 0

C	PREPARE THE INTIAL SHIP VERTEX ARRAY AT THE STARTING ANGLE
	CALL UPDSHP(SHPANG)
	CALL MKMOON()			! CREATE THE SURFACE HEIGHT DATA

C	CLEAR SCREEN AND DRAW THE STATIC SCREEN ELEMENTS
	CALL GTCHAR(QUIKUP)
	CALL CLRSCR()			! CLEAR SCREEN
	CALL WRTLBL()			! WRITE DATA LABELS
	CALL SHSCOR(SCORE, SHPCNT)	! SHOW SCORE
	CALL DRSTRS(LEFTX, SCALEX)	! DRAW SOME STARS
	CALL DRMOON(LEFTX, SCALEX)	! DRAW MOON SURFACE

	IF ((RDRMON .EQ. .TRUE.) .AND. (DEMO .EQ. .FALSE.)) THEN
		CALL SHINST()
	END IF

C	ENTER DARK MODE, VALUES LOWER CASE P - W / 112 - 119
C	THESE FADE AND 112 IS SOLID, 113 IS DOTS, 114 IS DASHES ETC.
C	DEFOCUS MODE IS ESC + LC H - LC O / 104 - 111
C	THESE STAY ON BUT ARE LINE, DOT, DASHED, DASH DOT, ETC.

C	MAIN SIMULATION LOOP
	DO SIMITR = 1, MAXITR
		WRITE (5,102) 27,112 ! USE DARK (FADING LINES) MODE FOR SHIP
		X1 = SHPX	! CONVERT POSITION TO INTEGER
		Y1 = SHPY
		CALL DRWSHP(X1,Y1, SHPANG, THRUST) ! DRAW THE SHIP
		CALL ABVSRF(LEFTX, SCALEX, X1, Y1, ABVMON) ! HIT GROUND YET?
		IF (ABVMON .EQ. .FALSE.) THEN ! GROUND CONTACT-CHECK LANDING
			GOTO 900
		END IF
		CALL MOVSHP()	! MOVE THE SHIP
		GOTCHR = .FALSE.
		IF (DEMO) THEN
			CALL DEMOMV()
			CALL DEMINP()
			IF (.NOT. DEMO) THEN
				KYWTTM = 3
				GOTO 100
			END IF
		ELSE
			CALL CHKINP(GOTCHR)	! CHECK FOR INPUT
		END IF
		CALL SHSIMD()		! SHOW SIMULATION DATA
		WRITE (5,102) 27,103 	! RESTORE NORMAL CRT MODE
C		DO NOTHING LOOP TO SLOW DOWN OUTPUT SPEED
		DO BSYCNT = 1, BSYLEN
			IF (DEMO) THEN
				CALL DEMINP()
				IF (.NOT. DEMO) GOTO 100
			ELSE
				CALL CHKINP(GOTCHR) ! INPUT CHK IN BSY LOOP
				IF (GOTCHR) GOTO 500
			END IF
		END DO
		! CHECK IF MOVED BEYOND SCREEN EDGE / REDRAW
		IF (RDRMON) THEN
			RDRMON = .FALSE.
			CALL MVCRTK(900,Y1)
			WRITE(5,102) 27,103 ! RETURN TO NORMAL STORAGE MODE
			CALL FLUSH(0)
			WRITE (5,*)'                                   HIT KEY'
			CALL INCHAR(INP,1,.FALSE.,KYWTTM,COUNT,ERR)
			CALL GTCHAR(QUIKUP)
			CALL CLRSCR()			! CLEAR SCREEN
			CALL WRTLBL()			! WRITE DATA LABELS
			CALL SHSCOR(SCORE, SHPCNT)	! SHOW SCORE
			CALL DRSTRS(LEFTX, SCALEX)	! DRAW SOME STARS
			CALL DRMOON(LEFTX, SCALEX)	! DRAW MOON SURFACE
		END IF
500		CONTINUE
		IF (QUIT) GOTO 900
	END DO
900	CONTINUE
	WRITE(5,101) 31	! EXIT GRAPHICS MODE
	CALL OUTCH (31, 1)
	WRITE(5,102) 27,103 ! RETURN TO NORMAL STORAGE MODE
	CALL OUTCH (27, 1)
	CALL OUTCH (103, 1)
	CALL FLUSH(0)
C	DRAW FINAL POSITION OF SHIP
	CALL DRWSHP(X1, Y1, SHPANG, THRUST)
	WRITE(5,101) 31	! EXIT GRAPHICS MODE
	CALL SHSIMD() ! SHOW FINAL SIM DATA
C 	CHECK LANDING AND COMPUTE SCORE
	CALL CKLAND()
	WRITE (5,*) '   '
	IF (QUIT .EQ. .TRUE.) GOTO 999
	IF (CRASH .EQ. .TRUE.) THEN
		SHPCNT = SHPCNT - 1
	END IF
	IF ((SHPCNT .GT. 0) .AND. (FUEL .GT. 0)) THEN
		WRITE (5,*) '                          PRESS KEY'
		CALL INCHAR(INP,1,.FALSE.,KYWTTM,COUNT,ERR)
		IF (COUNT .GT. 0) GOTO 110
	END IF
	IF (DEMO) GOTO 100
	WRITE (5,*) '                          PLAY AGAIN? Y/N'
	INP = 0
	COUNT = 0
	CALL INCHAR(INP,1,.FALSE.,KYWTTM,COUNT,ERR)
	IF (INP .EQ. 89) GOTO 100
999	CONTINUE
        END

C------------------------------------------------------
C ABVSRF(XLEFT, HSCALE SHPX, SHPY, RESULT)
C
C SUBROUTINE TO CHECK IF ANY PART OF THE SHIP IS AT OR
C BELOW THE LUNAR SURFACE
C RESULT CODES: .TRUE. = ABOVE SURFACE
C               .FALSE. = BELOW SURFACE
C------------------------------------------------------
	SUBROUTINE ABVSRF(XLEFT, HSCALE, SHPX, SHPY, RESULT)
	IMPLICIT NONE
	INTEGER XLEFT, HSCALE, SHPX, SHPY
	LOGICAL RESULT
	INTEGER SD(14,2)
	INTEGER SV(14,2)
	COMMON /SHPPTS/ SD, SV
	INTEGER I, X, Y, HT
	RESULT = .TRUE.
	DO I = 1, 14
		X = SHPX + SV(I, 1)
		Y = SHPY + SV(I, 2)
		CALL GETHTX(XLEFT, HSCALE, X, HT)
		IF (Y .LE. HT) THEN
			RESULT = .FALSE.
			GOTO 900
		END IF
	END DO
900	CONTINUE
	RETURN
	END

C------------------------------------------------------
C CHKINP
C
C CHECK FOR PLAYER INPUT AND PROCESS IT
C------------------------------------------------------
	SUBROUTINE CHKINP
	IMPLICIT NONE

C	SHARED DATA STRUCTURE FOR TERMINAL I/O LIBRARY
	INTEGER BUFSIZ, NBUF, ERR, COUNT
	BYTE INP
	BYTE OTHER
	BYTE BUF(1000)
	COMMON/IOBUFR/ NBUF, ERR, COUNT

C	SIM SPEED CONTROL
	REAL TIMMLT	! TIME MULTIPLIER FOR SLOW SYSTEMS
	INTEGER BSYLEN	! BUSY LOOP LENGTH FOR SLOW SYSTEMS
	COMMON/SIMSPD/TIMMLT,BSYLEN

C	SIMULATION DATA AND CONSTANTS
	LOGICAL ABVMON	! ABOVE MOON FLAG
	LOGICAL QUIT
	INTEGER SCORE
	REAL ANGINC 	! ANGLE INCREMENT WHEN TURNING
	INTEGER LEFTX
	INTEGER SCALEX
	LOGICAL RDRMON	! REDRAW MOON FROM SCROLLING
	LOGICAL FULWRN
	LOGICAL CRASH
        COMMON/SIMDAT/ABVMON,QUIT,SCORE,ANGINC,LEFTX,SCALEX,RDRMON,FULWRN,CRASH

C	SHIP PARAMS
	REAL SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL
	COMMON/SHPDAT/ SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL

	INP = 0
	COUNT = 0
	CALL INCHAR(INP,1,.FALSE.,0,COUNT,ERR)
C	CALL FLUSH(0)
	IF (COUNT .EQ. 0) GOTO 500

C 	PROCESS INPUT CHAR
C	! A: ROTATE CCW
	IF (INP .EQ. 65) THEN
		SHPANG = SHPANG + ANGINC
		CALL UPDSHP(SHPANG)
	END IF

C	! D: ROTATE CW
	IF (INP .EQ. 68) THEN
		SHPANG = SHPANG - ANGINC
		CALL UPDSHP(SHPANG)
	END IF

C	! W: THRUST++
	IF ((INP.EQ.87).AND.(FUEL.GT.0)) THEN
		THRUST = THRUST + 1
	END IF
C	! S: THRUST--
	IF (INP .EQ. 83) THEN
		THRUST = THRUST - 1
	END IF
C	MAKE SURE THRUST STAYS IN VALID RANGE
	IF (THRUST .LT. 0) THRUST = 0
	IF (THRUST .GT. 3) THRUST = 3
C	! ?: QUIT
	IF (INP .EQ. 63) THEN
		QUIT = .TRUE.
	END IF
C	! -: REDRAW
	IF (INP .EQ. 45) THEN
		RDRMON = .TRUE.
	END IF
C	! 1-3: SIM SPEED CONTROL
	IF (INP .EQ. 49) THEN
		TIMMLT = 1.0
		BSYLEN = 100
	END IF
	IF (INP .EQ. 50) THEN
		TIMMLT = 2.0
		BSYLEN = 300
	END IF
	IF (INP .EQ. 51) THEN
		TIMMLT = 2.5
		BSYLEN = 500
	END IF
500	CONTINUE
	RETURN
	END

C------------------------------------------------------
C CKLAND
C
C CHECK LANDING & COMPUTE SCORE
C------------------------------------------------------
	SUBROUTINE CKLAND
	IMPLICIT NONE
101	FORMAT(' ',A1)

C	SIMULATION DATA AND CONSTANTS
	LOGICAL ABVMON	! ABOVE MOON FLAG
	LOGICAL QUIT
	INTEGER SCORE
	REAL ANGINC 	! ANGLE INCREMENT WHEN TURNING
	INTEGER LEFTX
	INTEGER SCALEX
	LOGICAL RDRMON	! REDRAW MOON FROM SCROLLING
	LOGICAL FULWRN
	LOGICAL CRASH	! FLAG TO INDICATE SHIP CRASHED
        COMMON/SIMDAT/ABVMON,QUIT,SCORE,ANGINC,LEFTX,SCALEX,RDRMON,FULWRN,CRASH

C SHIP PARAMS
	REAL SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL
	COMMON/SHPDAT/ SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL

	INTEGER SD(14,2)
	INTEGER SV(14,2)
	COMMON /SHPPTS/ SD, SV

	LOGICAL GRDFLT
	INTEGER SUBSCR, X1, X2, H1, HX, X, LZWDTH
	REAL ANGMIN, ANGMAX

	CRASH = .FALSE.
	SUBSCR = 0
	ANGMIN = (3.14159 / 2) - (3.14159 / 15)
	ANGMAX = (3.14159 / 2) + (3.14159 / 15)

	CALL MVCRTK(400,800)
	CALL OUTCH (31, 1)
	WRITE (5,*) ' '
	WRITE (5,*) ' '
	WRITE (5,*) ' '
	WRITE (5,*) ' '
	WRITE (5,*) ' '
	WRITE (5,*) ' '
	WRITE (5,*) ' '
	WRITE (5,*) '                          LANDING REPORT'
	IF (VELY .LT. -2.0) THEN
	  CRASH = .TRUE.
	  WRITE (5,*) '                          VERTICAL VELOCITY TOO HIGH'
	END IF
	IF (ABS(VELX) .GT. 1.0) THEN
	  CRASH = .TRUE.
	  WRITE (5,*) '                          HORIZONTAL VELOCITY TOO HIGH'
	END IF
	IF ((SHPANG .LT. ANGMIN) .OR. (SHPANG .GT.ANGMAX)) THEN
	  CRASH = .TRUE.
	  WRITE (5,*) '                          SHIP ANGLE NOT VERTICAL'
	END IF
	CALL CKLZW(GRDFLT, LZWDTH)	! CHECK LANDING ZONE
	IF (.NOT. GRDFLT) THEN
	  CRASH = .TRUE.
	  WRITE (5,*) '                          GROUND NOT FLAT'
	END IF
	IF (CRASH) THEN
	  WRITE (5,*) '                          YOU CRASHED THE LUNAR MODULE'
	ELSE
	  WRITE (5,*) '                          50 SUCCESSFUL LANDING'
	  SUBSCR = SUBSCR + 50
	  IF (VELY .GT. -1.0) THEN
	    WRITE (5,*) '                          50 GENTLE TOUCHDOWN BONUS'
	    SUBSCR = SUBSCR + 50
	  END IF
	  IF (LZWDTH .LE. 70) THEN
	    WRITE (5,*) '                          50 SMALL LANDING ZONE BONUS'
	    SUBSCR = SUBSCR + 50
	  END IF 
	  IF (FUEL .GE. 100) THEN
	    WRITE (5,*) '                          50 FUEL SAVER BONUS'
	    SUBSCR = SUBSCR + 50
	  END IF
	END IF
	SCORE = SCORE + SUBSCR
	WRITE (5,*) '                          ----------------------------'
	WRITE (5,*) '                          THIS LANDING: ', SUBSCR
	WRITE (5,*) '                                 SCORE: ', SCORE
	RETURN
	END

C------------------------------------------------------
C CKLZW(ISFLAT, LZWDTH)
C
C CHECK LANDING ZONE FLATNESS AND WIDTH
C ISFLAT: OUTPUT / LOGICAL - TRUE IF LANDING ZONE IS FLAT
C LZWDTH: OUTPUT / INTEGER - WIDTH OF LANDING ZONE
C------------------------------------------------------
	SUBROUTINE CKLZW(ISFLAT, LZWDTH)
	IMPLICIT NONE
	LOGICAL ISFLAT
	INTEGER LZWDTH
101	FORMAT(' ',A1)

C 	SIMULATION DATA AND CONSTANTS
	LOGICAL ABVMON	! ABOVE MOON FLAG
	LOGICAL QUIT	! FLAG TO EXIT SIMULATION RUN
	INTEGER SCORE	! CURRENT SCORE
	REAL ANGINC 	! ANGLE INCREMENT WHEN TURNING
	INTEGER LEFTX	! LEFT EDGE OF CURRENT LUNAR SURFACE WINDOW
	INTEGER SCALEX	! HORIZONTAL MULTIPLIER FOR LUNAR SURFACE
	LOGICAL RDRMON	! REDRAW MOON FROM SCROLLING
	LOGICAL FULWRN	! FLAG TO INDICATE LOW FUEL CONDITION
	LOGICAL CRASH	! FLAG TO INDICATE SHIP CRASHED
        COMMON/SIMDAT/ABVMON,QUIT,SCORE,ANGINC,LEFTX,SCALEX,RDRMON,FULWRN,CRASH

C 	SHIP PARAMS
	REAL SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL
	COMMON/SHPDAT/ SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL

	! SHIP VERTICES
	INTEGER SD(14,2)
	INTEGER SV(14,2)
	COMMON /SHPPTS/ SD, SV

C	LOCAL VARIABLES
	INTEGER X, X1, X2, H1, HX

C	DETERMINE IF GROUND IS FLAT BETWEEN LEGS
	ISFLAT = .TRUE.
	X1 = SHPX + SV(1, 1) ! LEFT LEG 
	X2 = SHPX + SV(14, 1) ! RIGHT LEG
	! SWAP X1, X2 IF NEEDED
	IF (X1 .GT. X2) THEN
	  X = X1
	  X1 = X2
	  X2 = X
	END IF
	CALL GETHTX(LEFTX, SCALEX, X1, H1)
	DO X = X1, X2
	  CALL GETHTX(LEFTX, SCALEX, X, HX)
	  IF (HX .NE. H1) ISFLAT = .FALSE.
	END DO
	LZWDTH = 0
	! DETERMINE LANDING ZONE WIDTH
	IF (ISFLAT) THEN
		! CHECK LEFT OF LEGS
200		CONTINUE
		X1 = X1 - 1
		CALL GETHTX(LEFTX, SCALEX, X1, HX)
		IF ((X1 .GT. 1) .AND. (HX .EQ. H1)) GOTO 200
300		CONTINUE
		X2 = X2 + 1
		CALL GETHTX(LEFTX, SCALEX, X2, HX)
		IF ((X2 .LT. 1022) .AND. (HX .EQ. H1)) GOTO 300
		LZWDTH = X2 - X1
	END IF
	RETURN
	END

C------------------------------------------------------
C CLRSCR
C
C CLEAR THE SCREEN ESC + CTRL-L (ESC + FF) (FF = FORM FEED)
C------------------------------------------------------
	SUBROUTINE CLRSCR
	IMPLICIT NONE

	BYTE ESCFF(2)
	ESCFF(1) = 27
	ESCFF(2) = 12
	CALL OUTCH(ESCFF, 2)
	CALL FLUSH(0)
	RETURN
	END

C------------------------------------------------------
C DEMINP
C
C DEMO MODE CONTROLS AND CHECK FOR PLAYER START
C------------------------------------------------------
	SUBROUTINE DEMINP
	IMPLICIT NONE

C	SHARED DATA STRUCTURE FOR TERMINAL I/O LIBRARY
	INTEGER BUFSIZ, NBUF, ERR, COUNT
	BYTE INP
	BYTE OTHER
	BYTE BUF(1000)
	COMMON/IOBUFR/ NBUF, ERR, COUNT

C	SIM SPEED CONTROL
	REAL TIMMLT	! TIME MULTIPLIER FOR SLOW SYSTEMS
	INTEGER BSYLEN	! BUSY LOOP LENGTH FOR SLOW SYSTEMS
	LOGICAL DEMO	! FLAG TO INDICATE DEMO MODE IS RUNNING
	COMMON/SIMSPD/TIMMLT,BSYLEN,DEMO

C	SIMULATION DATA AND CONSTANTS
	LOGICAL ABVMON	! ABOVE MOON FLAG
	LOGICAL QUIT
	INTEGER SCORE
	REAL ANGINC 	! ANGLE INCREMENT WHEN TURNING
	INTEGER LEFTX
	INTEGER SCALEX
	LOGICAL RDRMON	! REDRAW MOON FROM SCROLLING
	LOGICAL FULWRN
	LOGICAL CRASH
        COMMON/SIMDAT/ABVMON,QUIT,SCORE,ANGINC,LEFTX,SCALEX,RDRMON,FULWRN,CRASH

	INP = 0
	COUNT = 0
	CALL INCHAR(INP,1,.FALSE.,0,COUNT,ERR)
	IF (INP .EQ. 32) THEN
		DEMO = .FALSE.
		RDRMON = .TRUE.
	END IF
	IF (INP .EQ. 81) THEN
		QUIT = .TRUE.
	END IF
	RETURN
	END

C------------------------------------------------------
C DEMOMV
C
C DEMO MODE CONTROLS
C------------------------------------------------------
	SUBROUTINE DEMOMV
	IMPLICIT NONE

C	SIM SPEED CONTROL
	REAL TIMMLT	! TIME MULTIPLIER FOR SLOW SYSTEMS
	INTEGER BSYLEN	! BUSY LOOP LENGTH FOR SLOW SYSTEMS
	LOGICAL DEMO	! FLAG TO INDICATE DEMO MODE IS RUNNING
	COMMON/SIMSPD/TIMMLT,BSYLEN,DEMO

C	SIMULATION DATA AND CONSTANTS
	LOGICAL ABVMON	! ABOVE MOON FLAG
	LOGICAL QUIT
	INTEGER SCORE
	REAL ANGINC 	! ANGLE INCREMENT WHEN TURNING
	INTEGER LEFTX
	INTEGER SCALEX
	LOGICAL RDRMON	! REDRAW MOON FROM SCROLLING
	LOGICAL FULWRN
	LOGICAL CRASH
        COMMON/SIMDAT/ABVMON,QUIT,SCORE,ANGINC,LEFTX,SCALEX,RDRMON,FULWRN,CRASH

C	SHIP PARAMS
	REAL SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL
	COMMON/SHPDAT/ SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL

	INTEGER*4 SEED
	REAL RN

	RN = RAN(SEED)
	IF (RN .LT. 0.06) THEN		! ROTATE LEFT
		SHPANG = SHPANG + ANGINC
		CALL UPDSHP(SHPANG)
	END IF
	IF (RN .GT. 0.92) THEN		! ROTATE RIGHT
		SHPANG = SHPANG - ANGINC
		CALL UPDSHP(SHPANG)
	END IF
C	TRY TO UPRIGHT IF TILTED RIGHT AND DRIFTING RIGHT
	IF ((SHPANG .LE. 1.1780) .AND. (VELX .GE. 1)) THEN
		SHPANG = SHPANG + ANGINC
		CALL UPDSHP(SHPANG)
	END IF
	IF (SHPANG .LT. 0) SHPANG = SHPANG + 6.28318
	IF (SHPANG .GT. 6.28318) SHPANG = SHPANG - 6.28318
C	IF UPSIDE DOWN, TRY TO TURN UPRIGHT
	IF (SHPANG .GT. 3.14159) THEN
		IF (SHPANG .GT. 4.7124) THEN
			SHPANG = SHPANG + ANGINC
		ELSE
			SHPANG = SHPANG - ANGINC
		END IF
		CALL UPDSHP(SHPANG)
	END IF
C	MAYBE USE THRUST IF UPRIGHT AND HAVE FUEL
	IF ((FUEL .GT. 0).AND.(SHPANG .LT. 3.14159)) THEN
		RN = RAN(SEED)
		IF ((RN .GE. 0.90) .AND. (SHPY .LT. 400)) THRUST = 3
		IF ((RN .LT. 0.90) .AND. (SHPY .LT. 500)) THRUST = 2
		IF (RN .LT. 0.60) THRUST = 1
		IF (RN .LT. 0.30) THRUST = 0
		! NO THRUST IF FLYING FAST TO RIGHT
		IF ((VELX .GT. 5).AND.(SHPANG .LT. 1.5708)) THRUST = 0
		IF (VELY .GT. 2) THRUST = 0
	ELSE
		THRUST = 0
	END IF
	RETURN
	END

C------------------------------------------------------
C DRMOON (XLEFT, HSCALE)
C
C DRAW THE MOON SURFACE STARTING FROM XLEFT
C MULTIPLY HORIZONTALLY BY HSCALE
C------------------------------------------------------
	SUBROUTINE DRMOON(XLEFT, HSCALE)
	IMPLICIT NONE
	INTEGER XLEFT, HSCALE
	INTEGER SRFHT(1023)
	COMMON /SRFDAT/ SRFHT
	BYTE BUF(66)	! OUTPUT BUFFER (CHUNKED)
205	FORMAT(' ' 66A1)
	INTEGER X, Y, YPREV, J, K, SCLX, XLIM

	XLIM = 1023 / HSCALE
	X = 1
	Y = SRFHT(XLEFT + X - 1)
	BUF(1) = 29
	BUF(66) = 31
	J = 1
	DO X = 1, XLIM
		SCLX = (X - 1) * HSCALE
		YPREV = Y
		Y = SRFHT(XLEFT + X - 1)
		CALL XY2BAR(SCLX,YPREV,66,J*4-2,BUF)
		J = J + 1
		IF (J .GT. 16) THEN
			WRITE(5,205) BUF
C			SAVE LAST POINT IN THIS PASS AS FIRST IN NEXT PASS
			BUF(2) = BUF(62)
			BUF(3) = BUF(63)
			BUF(4) = BUF(64)
			BUF(5) = BUF(65)
			J = 2
		END IF
	END DO
C	WRITE OUT REMAINING BUFFER
	IF (J .GT. 1) THEN
		BUF(J*4-2) = 31
		DO K = (J*4-1),66
			BUF(K) = 0
		END DO
		WRITE(5,205) BUF
	END IF
	RETURN
	END

C------------------------------------------------------
C DRSTRS(XLEFT, HSCALE)
C
C DRAW A FIELD OF STARS
C------------------------------------------------------
	SUBROUTINE DRSTRS(XLEFT, HSCALE)
	IMPLICIT NONE
	INTEGER XLEFT, HSCALE
	INTEGER I, NUMSTR, X, Y, HEIGHT
	INTEGER*4 SEED
	DATA NUMSTR/100/
	
	SEED = 1
	X = RAN(SEED)	! THROW AWAY FIRST RANDOM #
	DO I=1, NUMSTR
		X = 50 + (900 * RAN(SEED))
		Y = 50 + (700 * RAN(SEED))
		CALL GETHTX(XLEFT, HSCALE, X, HEIGHT)
		IF (Y .LE. HEIGHT) Y = HEIGHT + 10
		CALL DRWVEC(X, Y, X, Y)	
	END DO
	RETURN
	END

C------------------------------------------------------
C DRWSHP (X, Y, SHIPANG, THRUST)
C
C DRAW THE SHIP AT POSITION, ANGLE, THRUST
C------------------------------------------------------
	SUBROUTINE DRWSHP(X, Y, SHPANG, THRUST)
	IMPLICIT NONE
	INTEGER X, Y
	REAL SHPANG, THRUST
	INTEGER TXA, TYA, TXB, TYB
	INTEGER I
	INTEGER SD(14,2)
	INTEGER SV(14,2)
	COMMON /SHPPTS/ SD, SV
101	FORMAT('+',A1)
102	FORMAT(' ' 58A1)
103	FORMAT(' ' 14A1)
C BUFFERS FOR SHIP GRAPHICS BYTES AND THRUST FLAME
	BYTE BUF(58),TFB(14)

C METHOD: SEND ARRAY OF BYTES ALL AT ONCE WITH FORMAT STATEMENT
	BUF(1) = 29	! ENTER GRAPHICS MODE
C	FILL BUFFER WITH THE DRAW VECTORS
	DO I=1, 14
		CALL XY2BAR(X+SV(I,1),Y+SV(I,2),58,(I*4)-2,BUF)
	END DO
	BUF(58) = 31
	WRITE (5,102) BUF

C DRAW THRUST FLAME
	IF (THRUST .GT. 0) THEN
		TXA = (((THRUST*10)+10) * COS(SHPANG+3.14159)) + X
		TYA = (((THRUST*10)+10) * SIN(SHPANG+3.14159)) + Y
		TFB(1)=29
		CALL XY2BAR(X+SV(11,1),Y+SV(11,2),14, 2,TFB)
		CALL XY2BAR(TXA, TYA, 14, 6, TFB)
		CALL XY2BAR(X+SV(10,1),Y+SV(10,2),14, 10, TFB)
		TFB(14) = 31
		WRITE (5,103) TFB
	END IF
	RETURN
	END

C------------------------------------------------------
C DRWVEC(X1, Y1, X2, Y2)
C
C DRAW A VECTOR FROM X1,Y1 TO X2, Y2
C------------------------------------------------------
        SUBROUTINE DRWVEC(X1, Y1, X2, Y2)
	IMPLICIT NONE
209	FORMAT('+' 9A1)
	INTEGER X1, X2, Y1, Y2
	INTEGER X1H,X1L,Y1H,Y1L,X2H,X2L,Y2H,Y2L
	X1H = (X1 / 32) + 32
	X1L = X1 - ((X1H - 32) * 32) + 64
	Y1H = (Y1 / 32) + 32
	Y1L = Y1 - ((Y1H - 32) * 32) + 96
	X2H = (X2 / 32) + 32
	X2L = X2 - ((X2H - 32) * 32) + 64
	Y2H = (Y2 / 32) + 32
	Y2L = Y2 - ((Y2H - 32) * 32) + 96
C       GRAPHICS MODE + 2 COORDINATE PAIRS
	WRITE(5,209)29,Y1H,Y1L,X1H,X1L,Y2H,Y2L,X2H,X2L
	RETURN
	END

C------------------------------------------------------
C GETHTX(XLEFT, HSCALE, X, HEIGHT)
C
C FIND  SURFACE HEIGHT AT X, OFFSET BY XLEFT & HSCALE
C INTERPOLATE VALUE BETWEEN SCALED POINTS
C------------------------------------------------------
	SUBROUTINE GETHTX(XLEFT, HSCALE, X, HEIGHT)
	IMPLICIT NONE
	INTEGER XLEFT, HSCALE, X, HEIGHT
	INTEGER X1, X2, H1, H2
	REAL FMOD, DELTA, RH

C	SURFACE HEIGHT ARRAY
	INTEGER SRFHT(1023)
	COMMON /SRFDAT/ SRFHT

	X1 = (X / HSCALE)
	X2 = X1 + 1
	H1 = SRFHT(XLEFT + X1 - 1)
	H2 = SRFHT(XLEFT + X2 - 1)
	FMOD = X - (X1 * HSCALE)
	DELTA = H2 - H1
	RH = (FMOD * DELTA / HSCALE) + H1
	HEIGHT = RH
	RETURN
	END

C------------------------------------------------------
C MKMOON
C
C GENERATE THE LUNAR SURFACE HEIGHT DATA
C------------------------------------------------------
	SUBROUTINE MKMOON
	IMPLICIT NONE
	INTEGER SRFHT(1023)
	COMMON /SRFDAT/ SRFHT

	INTEGER X, Y, LZX, LZW, I
	INTEGER*4 SEED
	REAL YSCALE, YOFSET
	REAL LZXR, LZWR, RN

	BYTE TIMBUF(8)

	YSCALE = 21.0
	YOFSET = 10.0
	Y = 150		! INITIAL HEIGHT VALUE
	SEED = 1
	CALL TIME(TIMBUF)
	DO I = 1, 8
		SEED = SEED + TIMBUF(I)
	END DO
	RN = RAN(SEED) 	! THROW AWAY FIRST RANDOM NUMBER
	LZXR = (RAN(SEED) * 120.0) + 40.0	! LANDING ZONE START
	LZWR = (RAN(SEED) * 20.0) + 10.0	! LANDING ZONE WIDTH
	LZX = INT(LZXR)
	LZW = INT(LZWR)
	DO X = 1, 1023
		RN = (YSCALE * RAN(SEED)) - YOFSET
		IF ((X .GE. LZX) .AND. (X .LT. (LZX+LZW))) RN = 0
		Y = Y + RN
		IF (Y .LT. 30) Y = 30 ! MIN SURFACE HEIGHT
		SRFHT(X) = Y
	END DO
	RETURN
	END

C------------------------------------------------------
C MOVSHP
C
C MOVE SHIP BY CURRENT VELOCITY, CHECK FOR SCROLLING
C------------------------------------------------------
	SUBROUTINE MOVSHP
	IMPLICIT NONE
101	FORMAT(' ' A1)
102	FORMAT('+' 2A1)

C	SHIP DATA
	REAL SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL
	COMMON/SHPDAT/ SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL

C	SIM SPEED CONTROL
	REAL TIMMLT	! TIME MULTIPLIER FOR SLOW SYSTEMS
	INTEGER BSYLEN	! BUSY LOOP LENGTH FOR SLOW SYSTEMS
	LOGICAL DEMO	! FLAG TO INDICATE DEMO MODE IS RUNNING
	COMMON/SIMSPD/TIMMLT,BSYLEN,DEMO

C	PHYSICS CONSTANTS
	REAL MAXVH
	REAL MAXVV
	REAL GRAV
	REAL BURNRT
	REAL ACCTHR
	REAL LOFUEL
	COMMON/PHCONS/MAXVH,MAXVV,GRAV,BURNRT,ACCTHR,LOFUEL

C 	SIMULATION DATA AND CONSTANTS
	LOGICAL ABVMON	! ABOVE MOON FLAG
	LOGICAL QUIT	! FLAG TO EXIT SIMULATION RUN
	INTEGER SCORE	! CURRENT SCORE
	REAL ANGINC 	! ANGLE INCREMENT WHEN TURNING
	INTEGER LEFTX	! LEFT EDGE OF CURRENT LUNAR SURFACE WINDOW
	INTEGER SCALEX	! HORIZONTAL MULTIPLIER FOR LUNAR SURFACE
	LOGICAL RDRMON	! REDRAW MOON FROM SCROLLING
	LOGICAL FULWRN	! FLAG TO INDICATE LOW FUEL CONDITION
	LOGICAL CRASH	! FLAG TO INDICATE SHIP CRASHED
        COMMON/SIMDAT/ABVMON,QUIT,SCORE,ANGINC,LEFTX,SCALEX,RDRMON,FULWRN,CRASH

	! LOCAL VARIABLES
	INTEGER MAXX 	! FARTHEST RIGHT MAP CAN START
	INTEGER SCRINC	! WIDTH OF SCREEN IN SCALED UNITS
	REAL PRVFUL	! PREVIOUS VALUE OF REMAINING FUEL

	SCRINC = 1023 / SCALEX
	MAXX = 1023 - (2 * SCRINC)
C	COMPUTE NEW X,Y POSITION
	SHPX = SHPX + (TIMMLT * VELX)
	IF (SHPX .GT. 980) THEN	! SCROLL RIGHT IF POSSIBLE
		IF ((LEFTX .LT. MAXX) .AND. .NOT. DEMO) THEN
			LEFTX = LEFTX + SCRINC
			RDRMON = .TRUE.
			SHPX = 50
		ELSE
			SHPX = 980 ! CAN'T SCROLL ANY FURTHER
			VELX = 0
		END IF
	END IF
	IF (SHPX .LT. 50) THEN ! SCROLL LEFT IF POSSIBLE
		IF (LEFTX .GT. SCRINC) THEN 
			LEFTX = LEFTX - SCRINC
			RDRMON = .TRUE.
			SHPX = 980
		ELSE
			SHPX = 50 ! CAN'T SCROLL ANY FURTHER
			VELX = 0
		END IF
	END IF
	SHPY = SHPY + (TIMMLT * VELY)
	IF (SHPY .GT. 750) THEN 	! AT TOP OF SCREEN CANCEL VELOCITY
		SHPY = 750
		VELY = 0
	END IF
	IF (SHPY .LT. 50) SHPY = 50
C	COMPUTE ANY CHANGE IN VELOCITY DUE TO THRUST
	IF (THRUST .GT. 0) THEN
		VELX = VELX - (TIMMLT * ACCTHR * THRUST * COS(SHPANG+3.14159))
		VELY = VELY - (TIMMLT * ACCTHR * THRUST * SIN(SHPANG+3.14159))
	END IF
C	COMPUTE ANY CHANGE IN VELOCITY DUE TO GRAVITY
	VELY = VELY - (TIMMLT * GRAV)

C	LIMIT MAX VELOCITY
	IF (VELX .GT. MAXVH) VELX = MAXVH
	IF (VELX .LT. -MAXVH) VELX = -MAXVH
	IF (VELY .GT. MAXVV) VELY = MAXVV
	IF (VELY .LT. -MAXVV) VELY = -MAXVV
	IF (THRUST .GT. 0) THEN
		PRVFUL = FUEL
		FUEL = FUEL - (TIMMLT * BURNRT * THRUST)
		IF (FUEL .LT. 0) THEN
			FUEL = 0
			THRUST = 0
		END IF
		IF ((PRVFUL.GT.LOFUEL).AND.(FUEL.LE.LOFUEL)) FULWRN=.TRUE.
		IF ((PRVFUL .GT. 0) .AND. (FUEL .LE. 0)) FULWRN = .TRUE.
	END IF
	RETURN
	END

C------------------------------------------------------
C MVCRTK(X,Y)
C
C MOVE CURSOR TO X,Y BY TEK4010 GRAPHICS COMMAND
C------------------------------------------------------
	SUBROUTINE MVCRTK(X,Y)
	INTEGER X,Y
101	FORMAT('+' 6A1)
	BYTE BUF(6)
	BUF(1)= 29
	CALL XY2BAR(X, Y, 6, 2, BUF)
	BUF(6) = 31
	WRITE (5, 101) BUF
	RETURN
	END

C------------------------------------------------------
C MVCRVT(X,Y)
C
C MOVE CURSOR TO X,Y BY VT100 CURSOR POSITION COMMAND
C------------------------------------------------------
	SUBROUTINE MVCRVT(X,Y)
	INTEGER X,Y
C	SEND ESC[<V>;<H>H
101	FORMAT('+' 6A1)
	BYTE BUF(6)
	DATA BUF/27,91,49,59,50,72/
	BUF(3)=48+X
	BUF(5)=48+Y
	WRITE (5, 101) BUF
	RETURN
	END

C------------------------------------------------------
C SHINST
C
C SHOW INSTRUCTIONS
C------------------------------------------------------
	SUBROUTINE SHINST
	IMPLICIT NONE

	CALL MVCRTK(0, 600)
	WRITE (5,*) '                LAND ON FLAT SPOT'
	WRITE (5,*) '                VERTICAL SPEED 2.0 OR LESS'
	WRITE (5,*) '                HORIZONTAL SPEED 1.0 OR LESS'
	WRITE (5,*) '                3 SHIPS PER GAME'
	WRITE (5,*) '                    CONTROLS'
	WRITE (5,*) '                A - ROTATE LEFT'
	WRITE (5,*) '                D - ROTETE RIGHT'
	WRITE (5,*) '                W - INCREASE THRUST'
	WRITE (5,*) '                S - DECREASE THRUST'
	RETURN
	END

C------------------------------------------------------
C SHSCOR(SCORE)
C
C SHOW SCORE
C------------------------------------------------------
	SUBROUTINE SHSCOR(SCORE,SHIPS)
	IMPLICIT NONE
	INTEGER SCORE, SHIPS
204	FORMAT('+' 2X, I4, '/', I1)
C 	POSITION CURSOR FOR PRINTING SCORE
C	CALL DRWVEC(92,758,92,758)
C	CALL OUTCH(31,1)
	CALL MVCRTK(92,758)
	WRITE(5,204)SCORE, SHIPS
	RETURN
	END

C------------------------------------------------------
C SHSIMD
C
C SHOW SIM DATA TO PLAYER
C------------------------------------------------------
	SUBROUTINE SHSIMD
	IMPLICIT NONE
	REAL SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL
	COMMON/SHPDAT/ SHPX, SHPY, VELX, VELY, SHPANG, THRUST, FUEL

C 	SIMULATION DATA AND CONSTANTS
	LOGICAL ABVMON	! ABOVE MOON FLAG
	LOGICAL QUIT	! FLAG TO EXIT SIMULATION RUN
	INTEGER SCORE	! CURRENT SCORE
	REAL ANGINC 	! ANGLE INCREMENT WHEN TURNING
	INTEGER LEFTX	! LEFT EDGE OF CURRENT LUNAR SURFACE WINDOW
	INTEGER SCALEX	! HORIZONTAL MULTIPLIER FOR LUNAR SURFACE
	LOGICAL RDRMON	! REDRAW MOON FROM SCROLLING
	LOGICAL FULWRN	! FLAG TO INDICATE LOW FUEL CONDITION
	LOGICAL CRASH	! FLAG TO INDICATE SHIP CRASHED
        COMMON/SIMDAT/ABVMON,QUIT,SCORE,ANGINC,LEFTX,SCALEX,RDRMON,FULWRN,CRASH

204	FORMAT('+' 3X, F5.1)
205	FORMAT('+',A1,A1)
206	FORMAT('+',A1)
C 	POSITION CURSOR FOR PRINTING SIM DATA
	CALL MVCRTK(92,726)
	WRITE(5,204)FUEL
	CALL MVCRTK(92,704)
	WRITE(5,204)VELY
	CALL MVCRTK(92,682)
	WRITE(5,204)VELX
	IF (FULWRN) THEN
		CALL MVCRTK(480,360)
		WRITE (5,205) 27,103	! TURN ON NORMAL CRT WRITE MODE
		IF (FUEL .GT. 0) THEN
			WRITE (5,*) '                                     LOW FUEL'
		ELSE
			WRITE (5,*) ' '
			WRITE (5,*) '                                   OUT OF FUEL'
		END IF
C		WRITE (5,206) 7		! SEND BELL SOUND
		FULWRN = .FALSE.
	END IF
	RETURN
	END

C------------------------------------------------------
C UPDSHP(ANGLE)
C
C UPDATE THE SHIP VERTICIES BASED ON THE CURRENT ANGLE
C------------------------------------------------------
	SUBROUTINE UPDSHP(ANGLE)
	IMPLICIT NONE
	REAL ANGLE
	INTEGER SHPDEF(14,2)
	INTEGER SHPVRT(14,2)
	COMMON /SHPPTS/ SHPDEF,SHPVRT
	INTEGER N, X, Y
	REAL XO, YO
	REAL XR, YR, PA, PM
	DO N = 1,14
C		GET CARTESIAN POINT FROM SHIP DEF
		XO = SHPDEF(N,1)
		YO = SHPDEF(N,2)
C		COMPUTE TO POLAR COORDINATES
		PA = ATAN2(XO,YO)		 ! VECTOR ANGLE
		PM = SQRT((XO * XO) + (YO * YO)) ! LENGTH
		XR = PM * COS(PA + ANGLE) ! ROTATED X
		YR = PM * SIN(PA + ANGLE) ! ROTATED Y
C		CONVERT TO INTEGERS
		X = XR
		Y = YR
C		SAVE TO VERTEX ARRAY
		SHPVRT(N,1) = X
		SHPVRT(N,2) = Y
	END DO
	RETURN
	END

C------------------------------------------------------
C WRGXPT(X, Y)
C
C WRITE GRAPHICS START + ONE POINT
C------------------------------------------------------
	SUBROUTINE WRGXPT(X, Y)
	IMPLICIT NONE
	INTEGER X
	INTEGER Y
105	FORMAT('+',5A1)
	INTEGER XH, XL, YH, YL
	XH = (X / 32) + 32
	XL = X - ((XH - 32) * 32) + 64
	YH = (Y / 32) + 32
	YL = Y - ((YH - 32) * 32) + 96
C	WRITE(5,105)29,YH,YL,XH,XL
	CALL OUTCH(29, 1)
	CALL OUTCH(YH, 1)
	CALL OUTCH(YL, 1)
	CALL OUTCH(XH, 1)
	CALL OUTCH(XL, 1)
	RETURN
	END

C------------------------------------------------------
C WRTPNT(X, Y)
C
C SEND ONE POINT TO OUTPUT
C------------------------------------------------------
	SUBROUTINE WRTPNT(X, Y)
	IMPLICIT NONE
	INTEGER X
	INTEGER Y
104	FORMAT('+',4A1)
	INTEGER XH, XL, YH, YL
	XH = (X/32) + 32
	XL = X - ((XH - 32) * 32) + 64
	YH = (Y/32) + 32
	YL = Y - ((YH - 32) * 32) + 96
C	WRITE (5,104)YH,YL,XH,XL
	CALL OUTCH(YH, 1)
	CALL OUTCH(YL, 1)
	CALL OUTCH(XH, 1)
	CALL OUTCH(XL, 1)
	RETURN
	END

C------------------------------------------------------
C WRTLBL
C
C DRAW LABELS FOR SIM DATA
C------------------------------------------------------
	SUBROUTINE WRTLBL
	IMPLICIT NONE

C SIM SPEED CONTROL
	REAL TIMMLT	! TIME MULTIPLIER FOR SLOW SYSTEMS
	INTEGER BSYLEN	! BUSY LOOP LENGTH FOR SLOW SYSTEMS
	LOGICAL DEMO	! FLAG TO INDICATE DEMO MODE IS RUNNING
	COMMON/SIMSPD/TIMMLT,BSYLEN,DEMO

	INTEGER I

201	FORMAT('+',A8)
202	FORMAT(' ',A8)
	CALL MVCRTK(0, 758)
	WRITE(5,201) '  SCORE'
	WRITE(5,202) '   FUEL'
	WRITE(5,202) 'VRT VEL'
	WRITE(5,202) 'HRZ VEL'
	IF (DEMO) THEN
		DO I=1, 14
			WRITE(5,*) ' '
		END DO
		WRITE(5,*) '                           PRESS SPACE TO PLAY'
	END IF
	RETURN
	END

C------------------------------------------------------
C XY2BAR(X, Y, SIZE, IDX, BAR)
C
C CONVERT POINT TO 4 BYTES IN TEK4010 GRAPHICS FORMAT
C INPUT X,Y, ARRAY SIZE, ARRAY INDEX, OUTPUT ARRAY
C------------------------------------------------------
	SUBROUTINE XY2BAR(X, Y, SIZE, IDX, BAR)
	INTEGER X, Y, SIZE, IDX
	BYTE BAR(SIZE)
	BYTE B1, B2, B3, B4
	B1 = (Y / 32) + 32
	B2 = Y - ((B1 - 32) * 32) + 96
	B3 = (X / 32) + 32
	B4 = X - ((B3 - 32) * 32) + 64
	BAR(IDX) = B1
	BAR(IDX+1) = B2
	BAR(IDX+2) = B3
	BAR(IDX+3) = B4
	RETURN
	END
